{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/NewTodo/NewTodo.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoItem","_ref","todo","toggleComplete","deleteTodo","crossed","cx","","crossed-item","completed","react_default","a","createElement","className","type","onChange","id","checked","title","onClick","TodoList","todos","map","components_TodoItem_TodoItem","key","NewTodo","state","count","handleClick","event","preventDefault","target","addTodo","_this","props","value","length","newTodo","setState","prevState","_objectSpread","handleChange","onSubmit","this","placeholder","name","Component","Footer","removeAllCompleteTodos","updateActiveTab","activeTab","style","display","filter","href","App","toggleAllComplete","concat","Object","toConsumableArray","App_objectSpread","string","_this$state","todosToShow","components_NewTodo_NewTodo","htmlFor","components_TodoList_TodoList","components_Footer_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7e4707ac.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport cx from 'classnames';\n\nimport './TodoItem.css';\n\nconst TodoItem = ({ todo, toggleComplete, deleteTodo }) => {\n  const crossed = cx({\n    '': true,\n    'crossed-item': todo.completed,\n  });\n\n  return (\n    <li className={crossed}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => toggleComplete(todo.id)}\n          checked={todo.completed}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList = ({ todos, toggleComplete, deleteTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        todo={todo}\n        key={todo.id}\n        toggleComplete={toggleComplete}\n        deleteTodo={deleteTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n  })).isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTodo.css';\n\nclass NewTodo extends Component {\n  state = {\n    title: '',\n    count: 0,\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const { title } = event.target;\n    const { addTodo } = this.props;\n\n    if (title.value.length === 0) {\n      return false;\n    }\n\n    const newTodo = {\n      title: title.value,\n      completed: false,\n      id: this.state.count,\n    };\n\n    this.setState(prevState => ({\n      ...prevState,\n      title: '',\n      count: prevState.count + 1,\n    }));\n\n    addTodo(newTodo);\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleClick}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleChange}\n          value={this.state.title}\n          name=\"title\"\n        />\n        <input type=\"submit\" className=\"enter-submit\" />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = ({\n  todos,\n  removeAllCompleteTodos,\n  updateActiveTab,\n  activeTab,\n}) => (\n  <footer className=\"footer\" style={{ display: 'block' }}>\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.completed).length}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          onClick={() => updateActiveTab('all')}\n          className={activeTab === 'all' ? 'selected' : ''}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          onClick={() => updateActiveTab('active')}\n          href=\"#/active\"\n          className={activeTab === 'active' ? 'selected' : ''}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={() => updateActiveTab('completed')}\n          className={activeTab === 'completed' ? 'selected' : ''}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    {todos.filter(todo => todo.completed).length > 0 && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={removeAllCompleteTodos}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n\nFooter.propTypes = {\n  removeAllCompleteTodos: PropTypes.func.isRequired,\n  updateActiveTab: PropTypes.func.isRequired,\n  activeTab: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nimport TodoList from './components/TodoList/TodoList';\nimport NewTodo from './components/NewTodo/NewTodo';\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    activeTab: 'all',\n    toggleAllComplete: true,\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  };\n\n  toggleComplete = id => {\n    this.setState(({ todos }) => ({\n      todos: todos.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleAllComplete = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: prevState.toggleAllComplete,\n      })),\n      toggleAllComplete: !prevState.toggleAllComplete,\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  removeAllCompleteTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  updateActiveTab = (string) => {\n    this.setState({\n      activeTab: string,\n    });\n  }\n\n  render() {\n    const { todos, activeTab } = this.state;\n\n    let todosToShow = [];\n\n    if (activeTab === 'all') {\n      todosToShow = todos;\n    } else if (activeTab === 'active') {\n      todosToShow = todos.filter(todo => !todo.completed);\n    } else if (activeTab === 'completed') {\n      todosToShow = todos.filter(todo => todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.toggleAllComplete}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={todosToShow}\n            toggleComplete={this.toggleComplete}\n            deleteTodo={this.deleteTodo}\n          />\n        </section>\n\n        <Footer\n          todos={todos}\n          removeAllCompleteTodos={this.removeAllCompleteTodos}\n          activeTab={activeTab}\n          updateActiveTab={this.updateActiveTab}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}